#pragma checksum "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\Image\Image.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b436cbb329447d9516c00f4b35f324dac374e39b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Image_Image), @"mvc.1.0.view", @"/Views/Image/Image.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\_ViewImports.cshtml"
using Detectron;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\_ViewImports.cshtml"
using Detectron.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\_ViewImports.cshtml"
using Detectron.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b436cbb329447d9516c00f4b35f324dac374e39b", @"/Views/Image/Image.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"46517d4db7c4af83de76d6de3c196cf6c8706c87", @"/Views/_ViewImports.cshtml")]
    public class Views_Image_Image : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IList<string>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("imageForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\Image\Image.cshtml"
   int no = 1; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            WriteLiteral("\n");
            WriteLiteral(@"
<style>
    .drag-area {
        background: #5256ad;
        border: 2px dashed #fff;
        height: 400px;
        width: 700px;
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
    }

        .drag-area.active {
            border: 2px solid #fff;
        }

        .drag-area .icon {
            font-size: 100px;
            color: #fff;
        }

        .drag-area header {
            font-size: 30px;
            font-weight: 500;
            color: #fff;
        }

        .drag-area span {
            font-size: 25px;
            font-weight: 500;
            color: #fff;
            margin: 10px 0 15px 0;
        }

        .drag-area button {
            padding: 10px 25px;
            font-size: 20px;
            font-weight: 500;
            border: none;
            outline: none;
            background: #fff;
            color: #5256ad;
            border-radius: 5px;
            cursor: pointer;
 ");
            WriteLiteral("       }\n\n        .drag-area img {\n            height: 100%;\n            width: 100%;\n            object-fit: cover;\n            border-radius: 5px;\n        }\n</style>\n");
            WriteLiteral(@"<script src=""https://kit.fontawesome.com/a076d05399.js""></script>
<div class=""d-flex justify-content-center"" style=""max-height:400px"">
    <div class=""drag-area w-50 mx-1"">
        <div class=""icon""><i class=""fas fa-cloud-upload-alt""></i></div>
        <header>Drag & Drop to Upload File</header>
        <span>OR</span>
        <button type=""button"" id=""browse-btn"">Browse File</button>
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b436cbb329447d9516c00f4b35f324dac374e39b6294", async() => {
                WriteLiteral("\n            <input type=\"file\" name=\"imageFile\" hidden>\n            <button type=\"submit\" id=\"submit\" hidden></button>\n        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    </div>
    <div class=""justify-content-center w-50 border border-1 mx-1"">
        <h2 class=""text-center"">Detected Tags</h2>

<div class=""text-center"">

    <div class=""row text-center mt-25"">
        <div style=""overflow:scroll;height:350px;width:100%;overflow:auto"">
            <table border=""0"" width=""100%""  class=""my-table"">
                <thead>
                    <tr>
                        <th scope=""col"">No</th>
                        <th scope=""col"">Attribute</th>
                    </tr>
                </thead>

                <tbody id=""result"">
                    <tr>
                        <td>
                        </td>
                    </tr>
                </tbody>

            </table>
        </div>
       
    </div>
    </div>
</div>
");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(function () {
            $('#imageForm').submit(function (event) {
                event.preventDefault(); // prevent the default form submission behavior
                var formData = new FormData(this); // create a new FormData object from the form
                $.ajax({
                    url: '");
#nullable restore
#line 142 "C:\Users\158648\OneDrive - Arrow Electronics, Inc\Desktop\Dhirav\Views\Image\Image.cshtml"
                     Write(Url.Action("Image", "Image"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // replace with your controller action URL
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (result) {
                        // update the view with the result
                        // replace ""#yourResultElement"" with the ID of the element where you want to display the result
                        console.log(result);
                        result.forEach((value, key) => {
                            $('#result').html((_, oldContent) => {
                                return oldContent + `<tr><td>${key}</td><td>${value}</td></tr>`;
                            });
                        })
                    },
                    error: function (xhr, status, error) {
                        // handle error
                    }
                });
            });
        });
    </script>
");
            }
            );
            WriteLiteral(@"
<script>
    //selecting all required elements
    const dropArea = document.querySelector("".drag-area""),
        dragText = dropArea.querySelector(""header""),
        submitButton = document.getElementById(""submit""),
        button = document.getElementById(""browse-btn""),
        input = dropArea.querySelector(""input"");
    let file; //this is a global variable and we'll use it inside multiple functions

    button.onclick = () => {
        input.click(); //if user click on the button then the input also clicked
        console.log('clicked1');
    }

    input.onchange = () => {
        console.log('clicked');
        submitButton.click();
    }

    input.addEventListener(""change"", function () {
        //getting user select file and [0] this means if user select multiple files then we'll select only the first one
        file = this.files[0];
        dropArea.classList.add(""active"");
        showFile(); //calling function
    });


    //If user Drag File Over DropArea
    dropArea.addEventListener(""drago");
            WriteLiteral(@"ver"", (event) => {
        event.preventDefault(); //preventing from default behaviour
        dropArea.classList.add(""active"");
        dragText.textContent = ""Release to Upload File"";
    });

    //If user leave dragged File from DropArea
    dropArea.addEventListener(""dragleave"", () => {
        dropArea.classList.remove(""active"");
        dragText.textContent = ""Drag & Drop to Upload File"";
    });

    //If user drop File on DropArea
    dropArea.addEventListener(""drop"", (event) => {
        event.preventDefault(); //preventing from default behaviour
        //getting user select file and [0] this means if user select multiple files then we'll select only the first one
        file = event.dataTransfer.files[0];
        showFile(); //calling function
    });

    function showFile() {
        let fileType = file.type; //getting selected file type
        let validExtensions = [""image/jpeg"", ""image/jpg"", ""image/png""]; //adding some valid image extensions in array
        if (validExtensions.includes(file");
            WriteLiteral(@"Type)) { //if user selected file is an image file
            let fileReader = new FileReader(); //creating new FileReader object
            fileReader.onload = () => {
                let fileURL = fileReader.result; //passing user file source in fileURL variable
                let imgTag = `<img src=""${fileURL}"" alt="""">`; //creating an img tag and passing user selected file source inside src attribute
                dropArea.innerHTML = imgTag; //adding that created img tag inside dropArea container
            }
            fileReader.readAsDataURL(file);
        } else {
            alert(""This is not an Image File!"");
            dropArea.classList.remove(""active"");
            dragText.textContent = ""Drag & Drop to Upload File"";
        }
    }

</script>




");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IList<string>> Html { get; private set; }
    }
}
#pragma warning restore 1591
